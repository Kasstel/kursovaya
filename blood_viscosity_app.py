#streamlit run blood_viscosity_app.py
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import streamlit as st
from scipy.signal import find_peaks
from scipy.stats import linregress

# --- –§—É–Ω–∫—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π ---
def damped_oscillation(t, h0, sigma, omega, phi):
    return h0 * np.exp(-sigma * t) * np.cos(omega * t + phi)

# --- –ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∑–∞—Ç—É—Ö–∞–Ω–∏—è ---
def analyze_damping(t, h, sigma):
    h0_guess = np.max(h)
    sigma_guess = sigma
    omega_guess = 10
    phi_guess = 0
    popt, _ = curve_fit(damped_oscillation, t, h, p0=[h0_guess, sigma_guess, omega_guess, phi_guess])
    fit_h = damped_oscillation(t, *popt)
    sigma = popt[1]
    return popt, fit_h, sigma

# --- –†–∞—Å—á–µ—Ç –≤—è–∑–∫–æ—Å—Ç–∏ –ø–æ –∑–∞—Ç—É—Ö–∞—é—â–∏–º –∫–æ–ª–µ–±–∞–Ω–∏—è–º ---
def calculate_viscosity(rho, r, h0_guess, L, sigma ):
    eta = (sigma * rho * r**2 * h0_guess * (1 +  (L / (2 * h0_guess)))) / (2 * L)
    return eta

# --- –†–∞—Å—á–µ—Ç –≤—è–∑–∫–æ—Å—Ç–∏ –ø–æ –ü—É–∞–∑–µ–π–ª—é ---
def poiseuille_viscosity(Q, dP, R, L):
    return (np.pi * R**4 * dP) / (8 * Q * L)

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.title("–ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—è–∑–∫–æ—Å—Ç–∏ –∫—Ä–æ–≤–∏ –ø–æ –º–µ—Ç–æ–¥—É –∑–∞—Ç—É—Ö–∞—é—â–∏—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π")
st.markdown("–ê–≤—Ç–æ—Ä: *–õ—É–Ω–µ–≤ –ù–∏–∫–∏—Ç–∞*")

st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
R = st.sidebar.number_input("–†–∞–¥–∏—É—Å —Ç—Ä—É–±–∫–∏ R (–º)", 0.0001, 0.04, 0.01, format="%.3f")
rho = st.sidebar.number_input("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∫—Ä–æ–≤–∏ œÅ (–∫–≥/–º¬≥)", 900, 1200, 1060)
L = st.sidebar.number_input("–î–ª–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞ (–º)", value=0.1)

st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
uploaded_file = st.file_uploader("CSV-—Ñ–∞–π–ª (2 –∫–æ–ª–æ–Ω–∫–∏: t, h)", type="csv")

# --- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–∏–º—É–ª—è—Ü–∏—é ---
if not uploaded_file:
    h0 = 0.004
    sigma = np.log(3) / 6
    omega = 1
    phi = 0
    # –í—Ä–µ–º—è –æ—Ç 0 –¥–æ 10 —Å–µ–∫—É–Ω–¥
    t = np.linspace(0, 10, 100)
    h = h0 * np.exp(-sigma * t) * np.cos(omega * t + phi)
    noise = np.random.normal(0, 0.0002, size=h.shape)
    h = h + noise
    df = pd.DataFrame({'t': t, 'h': h})
else:
    df = pd.read_csv(uploaded_file)
    t = df.iloc[:, 0].values
    h = df.iloc[:, 1].values
    # 1. –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–∏–∫–æ–≤
    peaks, _ = find_peaks(np.abs(h), distance=10)  # distance –º–æ–∂–Ω–æ –ø–æ–¥–æ–≥–Ω–∞—Ç—å

    # 2. –í—Ä–µ–º—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∏–∫–æ–≤
    t_peaks = t[peaks]
    h_peaks = np.abs(h[peaks])
    ln_h = np.log(h_peaks)

    # 3. –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è ln(h) = ln(A) - sigma * t
    slope, intercept, r_value, p_value, std_err = linregress(t_peaks, ln_h)
    sigma = -slope  # –ú–∏–Ω—É—Å, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∞–∫–ª–æ–Ω —É–±—ã–≤–∞—é—â–∏–π

st.write("–§—Ä–∞–≥–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö:")
st.dataframe(df.head())

params, fit_h, sigma = analyze_damping(t, h,sigma)
eta = calculate_viscosity(rho, R, params[0],L, sigma)

st.success(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è œÉ = {sigma:.4f} 1/—Å")
st.success(f"–í—è–∑–∫–æ—Å—Ç—å Œ∑ = {eta:.6f} –ü–∞¬∑—Å")

# --- –ì—Ä–∞—Ñ–∏–∫ h(t) –∏ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ ---
st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–µ–±–∞–Ω–∏–π")
fig1, ax1 = plt.subplots()
ax1.plot(t, h, 'bo', label='–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç')
ax1.plot(t, fit_h, 'r-', label='–ê–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è')
ax1.set_xlabel("–í—Ä–µ–º—è (—Å)")
ax1.set_ylabel("–£—Ä–æ–≤–µ–Ω—å h(t) (–º)")
ax1.set_title("–ó–∞—Ç—É—Ö–∞—é—â–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è")
ax1.legend()
ax1.grid(True)
st.pyplot(fig1)



# --- –ë–ª–æ–∫ –ü—É–∞–∑–µ–π–ª—è ---
st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–µ—Ç–æ–¥–æ–º –ü—É–∞–∑–µ–π–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
with st.expander("–ú–µ—Ç–æ–¥ –ü—É–∞–∑–µ–π–ª—è"):
    V = st.number_input("–û–±—ä–µ–º –∫—Ä–æ–≤–∏ –≤ (–º–ª)", min_value=0.0001, value=1.0)
    t_pua = st.number_input("–í—Ä–µ–º—è –ø–µ—Ä–µ–ª–∏–≤–∞–Ω–∏—è (—Å)", min_value=0.0, value=0.0, format="%.2f")
    dP = st.number_input("–ü–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è ŒîP (–ü–∞)", min_value=0.0, value=1000.0)
    L_pua = st.number_input("–î–ª–∏–Ω–∞ —Ç—Ä—É–±–∫–∏ L (–º)", min_value=0.0001, value=0.2)
    r_pua = st.number_input("–†–∞–¥–∏—É—Å —Ç—Ä—É–±–∫–∏ –ø—Ä–∏–±–æ—Ä–∞ (–º)", min_value=0.0001, value=0.00055, format="%.5f")

    if (V > 0 and t_pua>0 and dP > 0 and L_pua > 0 and r_pua>0):
        Q = (V*10**(-6))/t_pua
        V_modi = V*10**(-6)
        eta_poiseuille = poiseuille_viscosity(Q, dP, r_pua, L_pua)
        diff = abs(eta - eta_poiseuille) / eta * 100
        st.info(f"–û–±—å–µ–º: V = {V_modi:.6f} m3")
        st.info(f"–ü—É–∞–∑–µ–π–ª—å: Œ∑ = {eta_poiseuille:.6f} –ü–∞¬∑—Å")
        st.warning(f"–†–∞–∑–Ω–∏—Ü–∞: {diff:.2f} %")
